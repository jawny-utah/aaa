version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/aaa
    parallelism: 2
    shell: /bin/bash --login
    environment:
      RAILS_ENV: test
      COVERAGE: true
    docker: # run the steps with Docker
      - image: circleci/ruby:2.6.3-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: root
      - image: circleci/postgres:10.4-alpine-postgis # database image
        environment: # environment variables for database
          POSTGRES_USER: root
          POSTGRES_DB: aaa_db
          POSTGRES_PASSWORD: ""
      - image: selenium/standalone-chrome-debug:3.141.59
      - image: redis:4.0.9

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      - restore_cache:
          keys:
            # This branch if available
            - v2-dep-{{ .Branch }}-
            # Default branch if not
            - v2-dep-master-
            # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
            - v2-dep-

      - run:
          name: "Apt: install system / build dependencies"
          command: |
            sudo apt-get update
            sudo apt-get -y install \
              curl \
              libcurl4-gnutls-dev \
              libexpat1-dev \
              libssl-dev \
              libz-dev \
              postgresql-client

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: install system libraries
          command: sudo apt-get update

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: gem install bundler

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-

      - run:
          name: update-npm
          command: 'curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -'

      - run:
          name: install npm
          command: sudo apt-get install -y nodejs

      - run:
          name: check npm version
          command: npm -v

      - run:
          name: Yarn Install
          command: sudo npm install -g yarn

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn


      # Store yarn / webpacker cache
      - save_cache:
          key: rails-demo-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: install bundles
          command: bundle install

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: v2-dep-{{ .Branch }}-{{ epoch }}
          paths:
            - ./vendor/bundle
            - ~/.bundle
            - public/assets
            - tmp/cache/assets/sprockets
            - ~/.cache/yarn

      - run:
          name: Set up DB
          command: |
            bundle exec rake db:create db:schema:load db:structure --trace
            bundle exec rake db:migrate

      - run:
          name: rubocop run
          command: bundle exec rubocop

      - run:
          name: Run rspec in parallel
          command: |
            mkdir -p test-results/rspec test-artifacts
            ./cc-test-reporter before-build
            bundle exec rspec --format progress \
                              --format RspecJunitFormatter \
                              --out test-results/rspec/rspec.xml \
                              --require rails_helper \
                              -- $(circleci tests glob "spec/**/*_spec.rb | circleci tests split --split-by=timings")
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-artifacts

  upload-coverage:
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
    environment:
      CC_TEST_REPORTER_ID: ea76e84facc669f837ea55ae7d44b23d189fcbf623b985fadf44c556790f10d3
    working_directory: ~/aaa

    steps:
      - attach_workspace:
          at: ~/aaa
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          command: |
            ./cc-test-reporter sum-coverage --output - codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -
workflows:
  version: 2.1

  commit:
    jobs:
      - build
      - upload-coverage:
          requires:
             - build
